---
controller_server:
  ros__parameters:
    use_sim_time: true
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    # failure_tolerance: 0.3
    failure_tolerance: 0.0  # +
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      # required_movement_radius: 0.5
      # movement_time_allowance: 10.0
      required_movement_radius: 0.2  # +
      required_movement_angle: 0.5  # +
      movement_time_allowance: 5.0  # +
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: true
    general_goal_checker:
      stateful: true
      plugin: "nav2_controller::SimpleGoalChecker"
      # xy_goal_tolerance: 0.25
      # yaw_goal_tolerance: 0.25
      xy_goal_tolerance: 0.15  # +
      yaw_goal_tolerance: 0.10  # +

    FollowPath:
      # --> plugin: "nav2_mppi_controller::MPPIController"
      # plugin: "nav2_rotation_shim_controller::RotationShimController"
      # primary_controller: "nav2_mppi_controller::MPPIController"
      # angular_dist_threshold: 1.22 # 70 degrees +
      # forward_sampling_distance: 0.5  # +
      # rotate_to_heading_angular_vel: 1.0  # +
      # max_angular_accel: 1.0  # +
      # simulate_ahead_time: 1.0  # +
      # retry_attempt_limit: 5  # +

      plugin: "nav2_mppi_controller::MPPIController"
      publish_critics: true  # custom parameter from forked nav2_mppi_controller
      # time_steps: 56
      time_steps: 60  # +
      model_dt: 0.05
      batch_size: 2000
      vx_std: 0.2
      vy_std: 0.2
      wz_std: 0.4
      # vx_max: 0.5
      vx_max: 0.254  # +
      # vx_min: -0.35
      vx_min: -0.15  # +
      vy_max: 0.5
      # wz_max: 1.9
      wz_max: 0.322  # +
      iteration_count: 1
      prune_distance: 1.7
      transform_tolerance: 0.1
      temperature: 0.3
      gamma: 0.015
      motion_model: "DiffDrive"
      visualize: false
      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3
      AckermannConstraints:
        min_turning_r: 0.2
      # critics are same
      critics: ["ConstraintCritic", "CostCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 1.4
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.5
      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 0.5
      CostCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.81
        critical_cost: 300.0
        consider_footprint: true
        collision_cost: 1000000.0
        near_goal_distance: 1.0
      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 14.0
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 3
        threshold_to_consider: 0.5
        offset_from_furthest: 20
        use_path_orientations: false
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        offset_from_furthest: 5
        threshold_to_consider: 1.4
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.5
        max_angle_to_furthest: 1.0
        forward_preference: true

local_costmap:
  local_costmap:
    ros__parameters:
      footprint: "[[0.080, -0.250],
                [0.157, -0.238],
                [0.227, -0.202],
                [0.282, -0.147],
                [0.318, -0.077],
                [0.330, 0.000],
                [0.318, 0.077],
                [0.282, 0.147],
                [0.227, 0.202],
                [0.157, 0.238],
                [0.080, 0.250],
                [0.080, 0.250],
                [-0.080, 0.250],
                [-0.080, 0.250],
                [-0.157, 0.238],
                [-0.227, 0.202],
                [-0.282, 0.147],
                [-0.318, 0.077],
                [-0.330, 0.000],
                [-0.318, -0.077],
                [-0.282, -0.147],
                [-0.227, -0.202],
                [-0.157, -0.238],
                [-0.080, -0.250],
                [-0.080, -0.250],
                [0.080, -0.250]]"  # +
      footprint_padding: 0.00  # +
      transform_tolerance: 1.0  # +
      # update_frequency: 5.0
      update_frequency: 20.0  # +
      # publish_frequency: 2.0
      publish_frequency: 20.0  # +
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: true
      rolling_window: false
      width: 3
      height: 3
      # resolution: 0.05  # used the og beacuse shi fcked up
      resolution: 0.02  # +
      # robot_radius: 0.22
      plugins: ["static_layer", "inflation_layer"]
      # inflation_layer:
      #   plugin: "nav2_costmap_2d::InflationLayer"
      #   cost_scaling_factor: 3.0
      #   inflation_radius: 0.55
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 1.0
        cost_scaling_factor: 4.0
        inflate_unknown: false
        inflate_around_unknown: true
      # voxel_layer:
      #   plugin: "nav2_costmap_2d::VoxelLayer"
      #   enabled: true
      #   publish_voxel_map: true
      #   origin_z: 0.0
      #   z_resolution: 0.05
      #   z_voxels: 16
      #   max_obstacle_height: 2.0
      #   mark_threshold: 0
      #   observation_sources: scan
      #   scan:
      #     topic: /scan
      #     max_obstacle_height: 2.0
      #     clearing: true
      #     marking: true
      #     data_type: "LaserScan"
      #     raytrace_max_range: 3.0
      #     raytrace_min_range: 0.0
      #     obstacle_max_range: 2.5
      #     obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: true
      always_send_full_costmap: true

global_costmap:
  global_costmap:
    ros__parameters:
      footprint: "[[0.080, -0.250],
                    [0.157, -0.238],
                    [0.227, -0.202],
                    [0.282, -0.147],
                    [0.318, -0.077],
                    [0.330, 0.000],
                    [0.318, 0.077],
                    [0.282, 0.147],
                    [0.227, 0.202],
                    [0.157, 0.238],
                    [0.080, 0.250],
                    [0.080, 0.250],
                    [-0.080, 0.250],
                    [-0.080, 0.250],
                    [-0.157, 0.238],
                    [-0.227, 0.202],
                    [-0.282, 0.147],
                    [-0.318, 0.077],
                    [-0.330, 0.000],
                    [-0.318, -0.077],
                    [-0.282, -0.147],
                    [-0.227, -0.202],
                    [-0.157, -0.238],
                    [-0.080, -0.250],
                    [-0.080, -0.250],
                    [0.080, -0.250]]"  # +
      footprint_padding: 0.00  # +
      rolling_window: false  # +
      # update_frequency: 1.0
      # publish_frequency: 1.0
      update_frequency: 5.0  # +
      publish_frequency: 5.0  # +
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: true
      # robot_radius: 0.22
      resolution: 0.05
      track_unknown_space: true
      # plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      plugins: ["static_layer", "inflation_layer"]
      # obstacle_layer:
      #   plugin: "nav2_costmap_2d::ObstacleLayer"
      #   enabled: true
      #   observation_sources: scan
      #   scan:
      #     topic: /scan
      #     max_obstacle_height: 2.0
      #     clearing: true
      #     marking: true
      #     data_type: "LaserScan"
      #     raytrace_max_range: 3.0
      #     raytrace_min_range: 0.0
      #     obstacle_max_range: 2.5
      #     obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: true
        transform_tolerance: 1.0  # +
      # inflation_layer:
      #   plugin: "nav2_costmap_2d::InflationLayer"
      #   cost_scaling_factor: 3.0
      #   inflation_radius: 0.55
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 1.0
        cost_scaling_factor: 3.0
        inflate_unknown: false
        inflate_around_unknown: true
      always_send_full_costmap: true

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: true
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true
    # this one is used on service robot
    # GridBased:
    #   plugin: "nav2_smac_planner/SmacPlanner2D"
    #   tolerance: 0.125
    #   downsample_costmap: false
    #   downsampling_factor: 1
    #   allow_unknown: false
    #   max_iterations: -1
    #   max_on_approach_iterations: 1000
    #   max_planning_time: 2.0
    #   cost_travel_multiplier: 3.0
    #   use_final_approach_orientation: false

# smoother_server:
#   ros__parameters:
#     use_sim_time: true
#     smoother_plugins: ["simple_smoother"]
#     simple_smoother:
#       plugin: "nav2_smoother::SimpleSmoother"
#       tolerance: 1.0e-10
#       max_its: 1000
#       do_refinement: true

# velocity_smoother:
#   ros__parameters:
#     use_sim_time: true
#     smoothing_frequency: 20.0
#     scale_velocities: false
#     feedback: "OPEN_LOOP"
#     max_velocity: [0.26, 0.0, 1.0]
#     min_velocity: [-0.26, 0.0, -1.0]
#     max_accel: [2.5, 0.0, 3.2]
#     max_decel: [-2.5, 0.0, -3.2]
#     odom_topic: "odom"
#     odom_duration: 0.1
#     deadband_velocity: [0.0, 0.0, 0.0]
#     velocity_timeout: 1.0
